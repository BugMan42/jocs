* Divisió en mòduls de interpreter
* El fitxer principal de interpreter no es interp.js sinó index.coffee
* Canvi de nom de interp a interpreter
* Canvi de nom de la classe AstNode a Ast
* Shell NOW HAS HISTORY!!!!!!!!
* Changed browser bundling procedure: now compiling the grammar is not needed!
* browser.js canviat per main.coffee
* bundle.js canviat per main.js (no minimitzat) i main.min.js (minimitzat) (es generen els dos)
* Mogut ast a carpeta parser (no és part de l'intèrpret)
* S'han afegit asserts a les funcions (parlo del nostre codi javascript)
  que reben paràmetres per comprovar que els seus tipus i valors són correctes (per detectar fàcilment errors que puguem tenir)
* Afegit mòdul d'errors:
    Els errors tenen:
        - nom: en majúscules, paraula clau
        - codi: número
        - missatge: missatge explicatiu de l'error

    Són personalitzables: tenen una funció complete(clau, valor, ...)
    que rep una llista amb placeholders i valors per als placeholders,
    per tal de poder indicar en el missatge de l'error noms de variables, etc,
    coses que varien depenen de com succeeixi l'error
* Ara les constants de tipus, operadors, etc. que abans estaven a utils estan
  a la classe Ast com a propietats estàtiques, i els seus classificadors tenem
  noms plurals (Ast.OPERATORS.PLUS, Ast.LITERALS.INT, etc. en comptes de Ast.OPERATOR.PLUS)

* MAJOR: El typechecking i la comprovació de definició/redefinició/no-definició
  de variables es fa abans de interpretar el codi. Concretament se n'encarrega
  el mòdul que hi ha a la carpeta 'semantics'

  Així doncs, al interpretar només cal fer comprovacions q nomes es poden fer
  en temps d'execució:
    - Llegir una variable declarada però no assignada
    - Divisió per 0
    - Una funció declarada no void no retorna cap valor

  A més, el semantic s'encarrega de afegir operacions de casting que després el interprèt
  podrà interpretar com si fossin operacions qualsevol. També es diferenciarà entre divisio entera i real
  canviant el nom del node de DIV a DIVINT o DIVDOUBLE

* Es comprova que no hi hagi redeclaració de dues funcions amb el mateix nom
* No es permet cap tipus de redefinició de variables, encara que sigui en scopes diferents
* Sí que es permet definir variables (sempre que tinguin noms que no s'hagin definit ja)
  en scopes més concrets, i la visibilitat és només dins l'scope concret
* Canvi de TYPE-DECL per DECLARATION
* Grammar: L'assign ara té un id (node) i no ID (literal tal cual metio, puta mierda) com a primer fill
* Ara no existeix BLOCK-CIN ni BLOCK-COUT, els dos son CIN i COUT amb els fills corresponents
* Ara no es permet declarar variables amb tipus void, ni com a paràmetres de funcions
* Param deixa de ser un node, hereda el valor de la expressió en questió (sry, no tenia sentit, era un estorb i el param-list ja t'aporta la info)
* Canviats els nodes de l'Ast que contenien tipus a majúscula (int -> INT)
* Canviat el node de STR a STRING
* '(' expr ')' ara retorna com a node el mateix que expr (abans nose q fotia)
* Afegida instrucció NOP per exemple: if(1); o while(1); tenen al BODY una instruccio filla q es de tipus NOP (realment compila en C++)
* Ara el return; es permet (return sense valor)
**********************************RECORDAR QUE SI EL MAIN NO RETORNA RES ALESHORES SE LI HA DE POSAR EL RETURN 0 ***************************************
